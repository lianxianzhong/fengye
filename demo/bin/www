#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('demo:server');
let http = require('http');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
//实例化
let io = require('socket.io')(server);
//建立连接
io.on('connection', (socket) => {
    console.log("连接成功");
    //返回消息
  socket.emit("msg","欢迎来找小撩聊天");
  //接受客户端消息
  socket.on("msg",(data)=>{

    let msg = backMsg(data);
    socket.emit("msg",msg);
  });
  socket.on("disconnect",()=>{
      console.log("连接失败");
  });
});

// 4. 根据用户输入, 返回信息
let backMsg = (data)=>{
    let msg = null;
    switch (data){
        case '小撩':
            msg =  '我在呢...';
            break;
        case '明天天气':
            msg =  '上海市明天天气可能不太好, 最低气温为21°, 有暴风雨!';
            break;
        case '你好':
            msg =  '下午好!';
            break;
        case '唱首歌':
            msg =  '我说的比唱的好听!';
            break;
        case '你很聪明':
            msg =  '哪里!哪里!';
            break;
        case '视频下载':
            msg =  '关注微信公众号旋之华, 有很多视频下载!';
            break;
        case '性别':
            msg =  '我就像刺球仙人掌一样, 没有性别!';
            break;
        case '我爱你':
            msg =  '我看过那么多云, 你是最灵动的那一朵!';
            break;
        default:
            msg = '小撩正在努力升级中...';
    }
    return msg;
};
